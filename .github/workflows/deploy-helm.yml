name: Deploy Hello World (Helm)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: demo-hello-eks
  K8S_NAMESPACE: hello
  RELEASE_NAME: hello
  CHART_DIR: ./hello-world

permissions:
  contents: read
  id-token: write   # <-- required for OIDC

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify chart path
        run: |
          ls -la "${CHART_DIR}" || true
          test -f "${CHART_DIR}/Chart.yaml" || { echo "Chart.yaml not found at ${CHART_DIR}"; exit 1; }

      # OIDC: assume IAM role (no long-lived secrets)
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::109736156037:role/gh-oidc-app-helm-hello-eks-deployer
          role-session-name: gha-helm-deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Authenticate to EKS
        run: |
          aws eks update-kubeconfig --name "${EKS_CLUSTER_NAME}" --region "${AWS_REGION}"
          kubectl get nodes

      - name: Create namespace if not exists
        run: |
          kubectl get ns "${K8S_NAMESPACE}" || kubectl create ns "${K8S_NAMESPACE}"

      - name: Helm lint
        run: helm lint "${CHART_DIR}"

      - name: Helm upgrade/install
        run: |
          helm upgrade --install "${RELEASE_NAME}" "${CHART_DIR}" \
            --namespace "${K8S_NAMESPACE}" \
            --values "${CHART_DIR}/values.yaml" \
            --wait --atomic --timeout 5m

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment -n "${K8S_NAMESPACE}" \
            -l app.kubernetes.io/instance="${RELEASE_NAME}" --timeout=300s

      - name: Show service
        run: |
          kubectl get svc -n "${K8S_NAMESPACE}"
          kubectl get svc -n "${K8S_NAMESPACE}" -l app.kubernetes.io/instance="${RELEASE_NAME}"
